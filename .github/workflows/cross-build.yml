
name: "交叉编译JIM"

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      version:
        description: '输入需要编译的版本:以字母"v"开头'
        required: true
        default: ''

jobs:
  buile_openwrt:
    runs-on: Ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    name: 构建项目
    steps:
      - name: 检查
        uses: actions/checkout@main

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: | 
          sudo snap refresh
          sudo snap install go --classic

      - name: 下载依赖
        run: |
          go mod tidy

      - name: 开始编译
        id: compile
        working-directory: ./
        run: |
          echo "darwin-amd64 编译中... "
          CGO_ENABLED=0 GOOS=darwin   GOARCH=amd64    go build -o ./bin/jim-darwin-amd64    ./*.go
          echo "darwin-arm64 编译中... "
          CGO_ENABLED=0 GOOS=darwin   GOARCH=arm64    go build -o ./bin/jim-darwin-arm64    ./*.go
          
          echo "freebsd-386 编译中... "
          CGO_ENABLED=0 GOOS=freebsd  GOARCH=386      go build -o ./bin/jim-freebsd-386     ./*.go
          echo "freebsd-amd64 编译中... "
          CGO_ENABLED=0 GOOS=freebsd  GOARCH=amd64    go build -o ./bin/jim-freebsd-amd64   ./*.go
          echo "freebsd-arm 编译中... "
          CGO_ENABLED=0 GOOS=freebsd  GOARCH=arm      go build -o ./bin/jim-freebsd-arm     ./*.go
          echo "freebsd-arm64 编译中... "
          CGO_ENABLED=0 GOOS=freebsd  GOARCH=arm64    go build -o ./bin/jim-freebsd-arm64   ./*.go
          
          
          echo "linux-386 编译中... "
          CGO_ENABLED=0 GOOS=linux    GOARCH=386      go build -o ./bin/jim-linux-386       ./*.go
          echo "linux-amd64 编译中... "
          CGO_ENABLED=0 GOOS=linux    GOARCH=amd64    go build -o ./bin/jim-linux-amd64     ./*.go
          echo "linux-arm 编译中... "
          CGO_ENABLED=0 GOOS=linux    GOARCH=arm      go build -o ./bin/jim-linux-arm       ./*.go
          echo "linux-arm64 编译中... "
          CGO_ENABLED=0 GOOS=linux    GOARCH=arm64    go build -o ./bin/jim-linux-arm64     ./*.go
          echo "linux-mips 编译中... "
          CGO_ENABLED=0 GOOS=linux    GOARCH=mips     go build -o ./bin/jim-linux-mips      ./*.go
          echo "linux-mips64 编译中... "
          CGO_ENABLED=0 GOOS=linux    GOARCH=mips64   go build -o ./bin/jim-linux-mips64    ./*.go
          echo "linux-386 编译中... "
          CGO_ENABLED=0 GOOS=windows  GOARCH=386      go build -o ./bin/jim-windows-386     ./*.go
          echo "linux-amd64 编译中... "
          CGO_ENABLED=0 GOOS=windows  GOARCH=amd64    go build -o ./bin/jim-windows-amd64   ./*.go
          echo "linux-arm 编译中... "
          CGO_ENABLED=0 GOOS=windows  GOARCH=arm      go build -o ./bin/jim-windows-arm     ./*.go
          echo "linux-arm64 编译中... "
          CGO_ENABLED=0 GOOS=windows  GOARCH=arm64    go build -o ./bin/jim-windows-arm64   ./*.go
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 整理文件
        id: organize
        if: steps.compile.outputs.status == 'success' && !cancelled()
        working-directory: ./bin
        run: |
          mkdir ./config
          cp ../config/config.yml ./config/config.yml
          cp -rd ../sql ./
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 发布已编译固件
        uses: ncipollo/release-action@main
        if: ${{ steps.organize.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ github.event.inputs.version}}
          name: ${{ github.event.inputs.version}}
          artifacts: ./bin/*
          allowUpdates: true
          body: |
            * JIM 简单的聊天系统