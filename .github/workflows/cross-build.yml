
name: "交叉编译JIM"

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      version:
        description: '输入需要编译的版本:以字母"v"开头'
        required: true
        default: ''

jobs:
  buile_openwrt:
    runs-on: Ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    name: 构建项目
    steps:
      - name: 检查
        uses: actions/checkout@main

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install zip unzip
          sudo snap refresh
          sudo snap install go --classic
          go install github.com/swaggo/swag/cmd/swag@latest
          
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: 下载依赖
        run: |
          go mod tidy

      - name: 开始编译
        id: compile
        working-directory: ./
        run: |
          
          function build_func {
            suffix=""
            if [ "$1" = "windows" ] ; then
              suffix=".exe"
            fi
            echo "编译OS:$1 ARCH:$2 ..."
            echo "CGO_ENABLED=0 GOOS=$1   GOARCH=$2    go build -o ./bin/jim-$1-$2${suffix}    ./*.go"
            CGO_ENABLED=0 GOOS=$1   GOARCH=$2    go build -o ./bin/jim-$1-$2${suffix}    ./*.go
          }
          
          echo "开始编译[darwin]环境执行文件"
          darwin_arch=("amd64" "arm64")
          for ((i=0; i<${#darwin_arch[@]}; i++)); do
            build_func darwin ${darwin_arch[$i]}
          done
          
          echo "开始编译[freebsd]环境执行文件"
          freebsd_arch=("386" "amd64" "arm" "arm64")
          for ((i=0; i<${#freebsd_arch[@]}; i++)); do
            build_func freebsd ${freebsd_arch[$i]}
          done
          
          echo "开始编译[linux]环境执行文件"
          linux_arch=("386" "amd64" "arm" "arm64" "mips" "mips64")
          for ((i=0; i<${#linux_arch[@]}; i++)); do
            build_func linux ${linux_arch[$i]}
          done
          
          echo "开始编译[windows]环境执行文件"
          windows_arch=("386" "amd64" "arm" "arm64")
          for ((i=0; i<${#windows_arch[@]}; i++)); do
            build_func windows ${windows_arch[$i]}
          done
          
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 整理文件
        id: organize
        if: steps.compile.outputs.status == 'success' && !cancelled()
        working-directory: ./bin
        run: |
          mkdir ./config
          cp ../config/config.yml ./config/config.yml
          cp -rd ../sql ./
          
          bin_arrays=($(ls jim-*))
          for ((i=0; i<${#bin_arrays[@]}; i++)); do
           zip_name=$(echo ${bin_arrays[$i]}|awk -F '-' '{print $2"-"$3}'|awk -F'.' '{print $1}')
           zip -r ${zip_name}-${{ github.event.inputs.version}}.zip ./${bin_arrays[$i]} ./config/ ./sql/
          done          
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 生成swag文档
        id: gendocs
        if: steps.organize.outputs.status == 'success' && !cancelled()
        working-directory: ./
        run: |
          localPath=$(pwd)
          $(go env GOPATH)/bin/swag init -g ./handler/router.go
          cd ../
          git clone -b main https://github.com/jerbe/jim-docs.git jim-docs
          
          echo "当前路径$(pwd), localPath:${localPath}"
          echo "cp -r ${localPath}/docs ./jim-docs/"
          cp -r ${localPath}/docs ./jim-docs/
          
          cd jim-docs
          
          echo "列出文件"
          ls
          git status --porcelain
          
          if git status --porcelain | grep .; then
            echo "添加更改文件"
            git add .
            echo "添加标签"
            git tag ${{ github.event.inputs.version }}
            echo "提交更改"
            git commit -am "${{ github.event.inputs.version }}"
            echo "推送代码"
            git push "https://${{ secrets.ACCESS_TOKEN }}@github.com/jerbe/jim-docs.git" HEAD:main
            echo "推送标签(tag)"
            git push --force origin ${{ github.event.inputs.version }}  
          
            curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.ACCESS_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/jerbe/jim-docs/actions/workflows/build.yml/dispatches \
            -d '{"ref":"main","inputs":{"version":"${{ github.event.inputs.version }}  "}}'
          else
            echo "没有东西需要提交"
            exit 0
          fi || exit 0
      - name: 发布到release
        uses: ncipollo/release-action@main
        if: ${{ steps.organize.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ github.event.inputs.version}}
          name: ${{ github.event.inputs.version}}
          artifacts: ./bin/*.zip
          allowUpdates: true
          body: |
            * JIM 简单的聊天系统